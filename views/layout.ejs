<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'Asset Management' : title%></title>
	<link rel="icon" href="/images/mblais.png">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/min/production.min.css">
    <!--STYLES END-->
  </head>

  <body>
  <% if(session.authenticated) { %>
	  <div id="wrapper">
        <nav id="nav" class="navbar navbar-inverse navbar-static-top">
		  <div class="container-fluid">
		    <div class="navbar-header navbar-static-top">
		      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>                        
		      </button>
		      <div id="nav-brand" class="navbar-brand">
		      	<img id="nav-brand-logo" src="/images/mblais.png" width="25" height="25" alt="Loading..." />
		      	<a id="nav-brand-name" href="#">Asset Management</a>
		      </div>
		    </div>
		    <div class="collapse navbar-collapse" id="myNavbar">
		      <ul id="navbar-views" class="nav navbar-nav">
		        <li class="<% if (title === 'Show') { %>active<% } %>"><a href="/users/show?email=<%= req.session.User.email %>"><%= req.session.User.firstname %> <%= req.session.User.lastname %></a></li>
		        <li class="<% if (title === 'Map') { %>active<% } %>"><a href="/map" id="map-link">Map</a></li>
		        <li class="<% if (title === 'MyForms') { %>active<% } %>"><a href="/forms/myForms" id="map-link">My Forms</a></li>
			<% if(session.User.admin) { %>
		        <li class="dropdown">
				  <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Administration<span class="caret"></span></a>
				  <ul class="dropdown-menu">
				  	<li><a href="/client">Clients</a></li>
				  	<li role="separator" class="divider"></li>
				  	<li><a href="/currency">Currencies</a></li>
				  	<li role="separator" class="divider"></li>
				  	<li><a href="/expensecategory">Expense Category</a></li>
				  	<li><a href="/expenses">Expenses</a></li>
				  	<li role="separator" class="divider"></li>
				  	<li><a href="/forms">Forms</a></li>
					<li><a href="/formfields">Form Fields</a></li>
				  	<li role="separator" class="divider"></li>
				  	<li><a href="/properties">Properties</a></li>
				  	<li role="separator" class="divider"></li>
				  	<li><a href="/security">Security Groups</a></li>
				  	<li role="separator" class="divider"></li>
					<li><a href="/users">Users</a></li>
				  </ul>
				</li>
			<% } %>
		      </ul>
		      <ul id="nav-logout"class="nav navbar-nav navbar-right">
		        <li><a href="/session/destroy"><span class="glyphicon glyphicon-log-out"></span> Log Out</a></li>
		      </ul>
		    </div>
		  </div>
		</nav>

        <!-- Page Content -->
        <div id="page-content-wrapper">        
  <% } %>
  		<% if(session.authenticated) { %>
  			<!--- Adds a ajax loader if page is taking time to load --->
			<div id="loading" class="col-lg-12 text-center vcenter">
			  <img id="loading-image" src="/images/mblais.png" width="100" height="100" alt="Loading..." /><br/>
			  <img id="loading-image" src="/images/ajax-loader.gif" alt="Loading..." />
			</div>
		<% } %>
        	<%- body %>
                        
  <% if(session.authenticated) { %>
        </div>
        <!-- /#page-content-wrapper -->
    </div>
    <!-- /#wrapper -->
  <% } %>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/min/production.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
